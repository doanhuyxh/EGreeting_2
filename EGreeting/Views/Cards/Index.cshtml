@model EGreeting.Models.Cards

@{
    ViewData["Title"] = Model.NameCard;
    List<EGreeting.Models.CardViewModels.TextContentViewModel> listText = Newtonsoft.Json.JsonConvert.DeserializeObject<List<EGreeting.Models.CardViewModels.TextContentViewModel>>(Model.TypeJsonCard);
}
@section Styles {
    <link href="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.3/css/lightbox.min.css" rel="stylesheet">
}
<div class="breadcrumb-container">
    <div class="container">
        <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/danh-muc/@Model.Categories.Slug">@Model.Categories.NameCategory</a></li>
                <li class="breadcrumb-item active" aria-current="page">@Model.NameCard</li>
            </ol>
        </nav>
    </div>

</div>

<div class="container mt-4">
    <div class="row">
        <div class="col-12 col-md-5 ">
            <a href="@Model.ImageCardPreview" class="img-left" data-lightbox="@Model.NameCard" data-title="@Model.NameCard">
                <img alt="@Model.NameCard"
                     src="@Model.ImageCardPreview"
                     width="100%" class="thumbnail fix-img-off">
                <div class="icon-lup">
                    <i class="fa fa-magnifying-glass-plus"></i>
                </div>
            </a>

        </div>
        <div class="col-12 col-md-7">
            <h1 id="effect_title">@Model.NameCard</h1>
            <div class="datePublished"><i class="fa fa-calendar" aria-hidden="true"></i> @Model.CreateDate.ToString("dd/MM/yyyy")</div>
            <div class="effect-des">
                <pre>
                    @Model.ShortDecription

                </pre>
            </div>
        </div>
        <div class="col-12 row">
            @if (ViewBag.UserName != null)
            {
                <div class="col">
                    <a href="" download="true" id="download_preview" class="img-left" style="max-width:300px">
                        <img src="" id="img_preview" style="width:100%; height:auto"/>
                    </a>                    
                </div>

                <div class="col">
                    <h4 class="text-center">Nội dung cần điền vào ảnh</h4>
                    @foreach (var item in listText)
                    {
                        <div class="card-body">
                            <label class="form-label">@item.Name</label>
                            <input class="form-control"
                                   data-point="@item.Point"
                                   data-font-famaily="@item.font_family"
                                   data-max-width="@item.max_width"
                                   data-size="@item.Size"
                                   data-color="@item.Color" />
                        </div>
                    }
                    <button type="button" class="btn btn-primary float-end float-right mx-2" data-bs-toggle="modal" data-bs-target="#emailModal">Gửi đến mail </button>
                    <button class="btn btn-success float-end float-right" onclick="TaoAnh()">Tạo ảnh</button>
                </div>
            }
            else
            {
                <a href="/dang-nhap" class="btn btn-primary"> Gửi đến mail</a>
            }

        </div>
    </div>
    <div class="modal fade" id="emailModal" tabindex="-1" aria-labelledby="emailModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="emailModalLabel">
                        Email list
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="mb-3">Email Subject</label>
                        <input type="text" class="form-control" id="EmailSubject" placeholder="Email Subject" required />
                    </div>
                    <div class="mb-3">
                        <label class="mb-3"> Email list <span id="count-email">(0)</span> <span class="btn btn-success" id="add-email">+</span></label>
                        <div id="email-list">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="submit-button">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.3/js/lightbox.min.js"></script>
    <script>
        $(document).ready(function () {
            function updateEmailCount() {
                var emailCount = $('#email-list .input-group').length;
                $('#count-email').text('(' + emailCount + ')');
            }
            $('#add-email').on('click', function () {
                var newInput = $('<div class="input-group mb-2"><input class="form-control" name="emails[]"  placeholder="Nhập email..." type="email"><span class="input-group-text btn-remove">Xóa</span></div>');
                $('#email-list').append(newInput);
                updateEmailCount();
            });

            $('#email-list').on('click', '.btn-remove', function () {
                $(this).parent('.input-group').remove();
                updateEmailCount();
            });
            $('#submit-button').on('click', function () {
                var emails = [];
                var isValid = true;
                $('input[name="emails[]"]').each(function () {
                    var email = $(this).val();
                    if (email === "") {
                        $(this).addClass('is-invalid');
                        isValid = false;
                    } else {
                        $(this).removeClass('is-invalid');
                    }
                    emails.push($(this).val());
                });
                var emailSubject = $("#EmailSubject").val();

                if (emails.length < 10) {
                    isValid = false;
                    alert("Please enter 10 emails.");
                }
                if (emailSubject === "") {
                    $("#EmailSubject").addClass('is-invalid');
                    isValid = false;
                    alert("Please enter the email subject.");
                } else {
                    $("#EmailSubject").removeClass('is-invalid');
                }
                if (isValid) {
                    $('#loadingMore').fadeIn();

                    var formData = new FormData();

                    emails.forEach(function (email, index) {
                        formData.append('EmailList[' + index + ']', email);
                    });

                    formData.append('EmailSubject', emailSubject);
                    formData.append('CardID', '@Model.IDCard');

                    axios.post('/user/send-email', formData)
                        .then(function (response) {
                            $('#loadingMore').fadeOut();

                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Sent successfully',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    return;
                                }
                            });

                        })
                        .catch(function (error) {
                            $('#loadingMore').fadeOut();

                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'An Error occurred.Please try again later',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    return;
                                }
                            });

                        })
                }

            });

        });

        function TaoAnh() {

            const inputs = document.getElementsByTagName('input');
            const data = []; // Đảm bảo bạn khởi tạo mảng data trước khi sử dụng

            for (let i = 0; i < inputs.length; i++) {
                let ponit = inputs[i].getAttribute('data-point');

                // Kiểm tra nếu `data-point` không tồn tại hoặc không hợp lệ
                if (!ponit) {
                    console.warn(`Input ${i} không có thuộc tính data-point!`);
                    continue;
                }

                ponit = ponit.toLowerCase().trim().replace(' ', ''); // Chuẩn hóa dữ liệu
                const value = inputs[i].value;
                const coordinates = ponit.split(',');

                // Đảm bảo chuỗi tách ra có đủ 2 phần
                if (coordinates.length !== 2) {
                    console.error(`data-point không hợp lệ: ${ponit}`);
                    continue;
                }

                const x = coordinates[0];
                const y = coordinates[1];


                const font = inputs[i].getAttribute('data-font-famaily');
                const size = inputs[i].getAttribute('data-size');
                const color = inputs[i].getAttribute('data-color');
                const max_width = inputs[i].getAttribute('data-max-width');

                data.push({
                    x: x,
                    y: y,
                    text: value,
                    font: font,
                    font_size: size,
                    color: color,
                    max_width: max_width
                });
            }


            fetch(`/Cards/GenderText?id_card=@Model.IDCard`, {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(res => res.json())
                .then(res => {

                    const imagePath = res.path;

                    if (imagePath) {

                        $("#img_preview").attr("src", imagePath)
                        $("#download_preview").attr("href", imagePath)

                        const link = document.createElement('a');
                        link.href = imagePath;
                        link.download = "downloaded-image.jpg";


                        document.body.appendChild(link);
                        link.click();


                        document.body.removeChild(link);
                    } else {
                        console.error("Đường dẫn ảnh không hợp lệ");
                    }
                })
                .catch(error => console.error('Đã xảy ra lỗi:', error));


        }

    </script>
}